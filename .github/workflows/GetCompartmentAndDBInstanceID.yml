name: "GetCompartmentIdandDBInstanceID"
on:
#  schedule:
#    - cron: '*/5 * * * *'
  
 # push:
 #   branches: [ "main" ]
 # pull_request:
 #   branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_call:
   inputs:
      envname:
        description: 'source database env name'
        required: true
        type: string
        default: dev
      db-instance-name:
        description: 'source database instance name'
        required: true
        type: string
        default: Thayer_Development
      compartment-name:
       description: 'compartment name to retrieve the DB instance details '
       required: true
       type: string
       default: thayer_dev
   outputs:
      compartmentocid:
        description: "return compartment ocid"
        value: ${{ jobs.getcompartmentanddbinstanceid.outputs.compartmentocid }}
      dbinstanceocid:
        description: "return db instance ocid"
        value: ${{ jobs.getcompartmentanddbinstanceid.outputs.dbinstanceocid }}
     
jobs:
  getcompartmentanddbinstanceid:
    runs-on: self-hosted
    environment: ${{ inputs.envname || 'dev' }} 
    name: CompartmentAndDBInstIDRetrieval
    env:
      OCI_CLI_USER: ${{ secrets.OCI_CLI_USER }}
      OCI_CLI_TENANCY: ${{ secrets.OCI_CLI_TENANCY }}
      OCI_CLI_FINGERPRINT: ${{ secrets.OCI_CLI_FINGERPRINT }}
      OCI_CLI_KEY_CONTENT: ${{ secrets.OCI_CLI_KEY_CONTENT }}
      OCI_CLI_REGION: ${{ secrets.OCI_CLI_REGION }}
      OCI_INSTANCE_ID: ${{ secrets.OCI_INSTANCE_ID }}
      #RUNNER_TOOL_CACHE: /thayer/envs/dev
      #AGENT_TOOLSDIRECTORY: /thayer/envs/dev
      DB_ENV: ${{ github.event.inputs.envname || 'dev' }}
      DB_INST: ${{ github.event.inputs.db-instance-name || 'Thayer_Development' }}
    
      OCI_COMPARTMENT_NAME: ${{  inputs.compartment-name || 'thayer_dev' }}
     
    steps:
      - name: Workspace Location
        run: echo $GITHUB_WORKSPACE
      
      - name: Get Compartment ID the
        if: "${{ github.event.inputs.compartment-name != '' }}"
        uses: oracle-actions/run-oci-cli-command@v1.3.2
        id: getcompartmentid
        with:
          command: ' oci  iam compartment  list '
          query: "data[?name=='${{ env.OCI_COMPARTMENT_NAME }}'].id"
          silent: false
      - name: Add Compartment OCID To the Env 
        if: "${{ github.event.inputs.compartment-name != '' }}"
        id: compartmentocidoutput
        env:
         cmpid: ${{ steps.getcompartmentid.outputs.output }}
        run: |
          echo "test****"$cmpid
          echo "cmpid=$cmpid" >> $GITHUB_OUTPUT
          cat $GITHUB_OUTPUT
        
          echo "${{ steps.getcompartmentid.outputs.output }} | jq ."
          retid=$(echo ${{ steps.getcompartmentid.outputs.output }} | jq .[0])
         
          echo "retid"$retid
          echo "DB_COMPARTMENTID=$(echo $retid)" >> $GITHUB_ENV
          echo "DB_COMPARTMENTID=$(echo $retid)" >> $GITHUB_OUTPUT
          echo "DB INSTANCE NAME****" ${{ github.event.inputs.db-instance-name }}
      - name: Get Source DB ID 
       
        if: "${{ github.event.inputs.db-instance-name != '' }}"
        uses: oracle-actions/run-oci-cli-command@v1.3.2
        id: getsourcedbid
        with:
          command: ' oci db autonomous-database list --compartment-id ${{ env.DB_COMPARTMENTID }} --display-name ${{ env.DB_INST }}'
          #query: "data[?'display-name'=='${{ env.DB_INST }}'].id"
          silent: false
        
      - name: Add Source DB OCID To the Env 
        id: getsourcedbidoutput
        if: "${{ github.event.inputs.db-instance-name != '' }}"
        env:
         srcid: ${{ steps.getsourcedbid.outputs.output }}
        run: |
         
          echo "srcid***"$srcid 
          #cat $GITHUB_OUTPUT
          echo ${{ steps.getsourcedbid.outputs.output }} | jq .data[0].id
          retid=$(echo ${{ steps.getsourcedbid.outputs.output }} | jq .data[0].id)
          
          echo "DB_INST_ID=$(echo $retid)" >> $GITHUB_ENV
          echo "DB_INST_ID=$(echo $retid)" >> $GITHUB_OUTPUT
          cat $GITHUB_ENV
    outputs:
      compartmentocid: ${{ steps.compartmentocidoutput.outputs.DB_COMPARTMENTID }}
      dbinstanceocid: ${{ steps.getsourcedbidoutput.outputs.DB_INST_ID }}
      
      
     
    

