name: "GenerateDBChangeLogs"
on:
#  schedule:
#    - cron: '*/5 * * * *'
  
 # push:
 #   branches: [ "main" ]
 # pull_request:
 #   branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
   inputs:
      envname:
        description: 'Environment name of Source Database'
        required: true
        type: string
        default: dev
      db-instance-name:
        description: 'Source Database Instance Display Name'
        required: true
        type: string
        default: 'Thayer_Development'
      compartment-name:
       description: 'Compartment of the Source Database'
       required: true
       default: thayer_dev
      dbschemastogeneratecl:
        description: 'List of comma seperated schemas to generate the changelogs'
        required: false
        type: string
        default: 'PICASSO,IMAGE_STORE,C##ADP$SERVICE'
      changelogformat:
        description: 'ChangeLog format like sql,json etc'
        required: false
        type: string
        default: 'sql'
      

jobs:
  getcompartmentanddbinstid:
   uses: './.github/workflows/GetOCIDsOfResources.yml'
   with:
          envname: ${{ inputs.envname || 'dev' }} 
          db-instance-name:  ${{ github.event.inputs.db-instance-name || 'Thayer_Development' }}
          compartment-name: ${{  inputs.compartment-name || 'thayer_dev' }}
   secrets: inherit
   
  preparelbchangelog:
    needs: getcompartmentanddbinstid
    runs-on: self-hosted
    environment: ${{ inputs.envname || 'dev' }} 
    
    name: GenerateDBChangeLogsUsingSqlcl
    env:
      OCI_CLI_USER: ${{ secrets.OCI_CLI_USER }}
      OCI_CLI_TENANCY: ${{ secrets.OCI_CLI_TENANCY }}
      OCI_CLI_FINGERPRINT: ${{ secrets.OCI_CLI_FINGERPRINT }}
      OCI_CLI_KEY_CONTENT: ${{ secrets.OCI_CLI_KEY_CONTENT }}
      OCI_CLI_REGION: ${{ secrets.OCI_CLI_REGION }}
      OCI_INSTANCE_ID: ${{ secrets.OCI_INSTANCE_ID }}
      #RUNNER_TOOL_CACHE: /thayer/envs/dev
      #AGENT_TOOLSDIRECTORY: /thayer/envs/dev
      DB_ENV: ${{ github.event.inputs.envname || 'thayer_dev' }}
      DB_INST: ${{ github.event.inputs.db-instance-name || 'Thayer_Development' }}
      DB_USER: ${{ format('DB_{0}_USER', github.event.inputs.db-instance-name || 'liquibase_user' ) }}
      DB_PASSWD: ${{ format('DB_{0}_PASSWD',github.event.inputs.db-instance-name || 'thayerdev') }}
      DB_WALLET_PASSWD: ${{ format('DB_{0}_WALLETPASSWD',github.event.inputs.db-instance-name || 'thayerdev') }}
      DB_TNSNAME: ${{ format('DB_{0}_TNSNAME',github.event.inputs.db-instance-name || 'thayerdev' ) }}
      OCI_COMPARTMENT_NAME: ${{  inputs.compartment-name || 'thayer_dev' }}
      SCHEMASLIST: ${{  inputs.dbschemastogeneratecl ||  vars.LISTOFSCHEMAS }}
      LBSQLCLCMD: "lb generate-changelog -output-file controller.${{ inputs.changelogformat || 'xml' }}"
     
    steps:
      - name: Workspace Location
        run: echo $GITHUB_WORKSPACE
    
      
      - name: Add Compartment OCID To the Env 
        id: compartmentocidoutput
        env:
         cmpid: ${{ needs.getcompartmentanddbinstid.outputs.compartmentocid }}
         
        run: |
          echo "test****"$cmpid
          echo "build_path=$cmpid" >> $GITHUB_OUTPUT
          cat $GITHUB_OUTPUT
        
          echo "${{ needs.getcompartmentanddbinstid.outputs.compartmentocid }} "
          retid=$(echo ${{ needs.getcompartmentanddbinstid.outputs.compartmentocid }})
         
          echo "compartmentid******"$retid
          echo "DB_COMPARTMENTID=$(echo $retid)" >> $GITHUB_ENV
          echo "DB_COMPARTMENTID=$(echo $retid)" >> $GITHUB_OUTPUT
          echo  "LBSQLCLCMD=$(echo lb generate-changelog -output-file controller.${{ inputs.changelogformat || 'xml' }} )" >> $GITHUB_OUTPUT 
    
        
      - name: Add Source DB OCID To the Env 
        id: dbinstocidoutput
        env:
         srcid: ${{ needs.getcompartmentanddbinstid.outputs.dbinstanceocid }}
        run: |
         
          echo "srcid***"$srcid 
          #cat $GITHUB_OUTPUT
          echo ${{ needs.getcompartmentanddbinstid.outputs.dbinstanceocid }}
          retid=$(echo ${{ needs.getcompartmentanddbinstid.outputs.dbinstanceocid }})
          echo "retid*** " $retid
          echo "DB_INST_ID=$(echo $retid)" >> $GITHUB_ENV
          cat $GITHUB_ENV
      - name: Get Oracle Wallet
        uses: oracle-actions/run-oci-cli-command@v1.3.2
        id: get-wallet-id
       
        with:
          command: ' oci db autonomous-database generate-wallet --autonomous-database-id ${{ env.DB_INST_ID }} --file ${{ env.DB_INST }}.zip --password ${{ secrets[env.DB_WALLET_PASSWD] }} --generate-type SINGLE'
          silent: false
      - name : setup java
        uses: actions/setup-java@v4
        with:
         distribution: 'oracle'
         java-version: '21.0.4'
     
      - name: 'setup dirs'
        run: |
          
          rm -rf ${{ secrets.DB_ENV_BASEDIR }}/${{ env.DB_ENV }}/dbinstances/${{ env.DB_INST }}/
          mkdir -p ${{ secrets.DB_ENV_BASEDIR }}/${{ env.DB_ENV }}/dbinstances/${{ env.DB_INST }}/lbfiles
          unzip  $GITHUB_WORKSPACE/${{ env.DB_INST }}.zip -d ${{ secrets.DB_ENV_BASEDIR }}/${{ env.DB_ENV }}/dbinstances/${{ env.DB_INST }}/
      - name: 'create and cleanup the schema dirs'
        id: createandcleanschemadirs
        working-directory: ${{ secrets.DB_ENV_BASEDIR }}/${{ env.DB_ENV }}/dbinstances/${{ env.DB_INST }}/lbfiles
        
        run: |
         echo "SQLCL***"${{ secrets.SQLCL_HOME }}
         echo "SQLCLHOME=${{ secrets.SQLCL_HOME }}/" >> "$GITHUB_ENV"
         echo "${{ secrets.SQLCL_HOME }}/bin" >> $GITHUB_PATH
         IFS="," read -a schemaslist <<< ${{ env.SCHEMASLIST }}
            for i in "${schemaslist[@]}"; do
              echo "Value: ${i}"
              rm -rf ${i}
              mkdir -p ${i}
            done

          
  generatelbchangelogs:
    needs: getcompartmentanddbinstid
    strategy:
     matrix:
      include: 
        - schemanname: ${{ inputs.schema-name }}
          envname:  ${{ inputs.envname || 'dev' }} 
          db-instance-name: ${{ inputs.db-instance-name || 'Thayer_Development' }}
          db-instance-id: ${{ needs.getcompartmentanddbinstid.outputs.dbinstanceocid }}
          sqlclcmd: ${{ needs.getcompartmentanddbinstid.outputs.LBSQLCLCMD }}
        
        
        
    uses: './.github/workflows/ExecuteLBSQLCmd.yml'
    with:
      envname: '${{ matrix.envname }}'
      db-instance-name: '${{ matrix.db-instance-name }}'
      db-instance-id: '${{ matrix.db-instance-id }}'
      schemaname: '${{ matrix.schenmaname }}'
      sqlcl-cmd: '${{ matrix.sqlclcmd }}'
      
    secrets: inherit
            
        
         
         
         
        

         
         

    
    
     
      
     
    


