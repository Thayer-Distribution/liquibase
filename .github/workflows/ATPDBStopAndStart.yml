name: "ATPDB-StopandStart "
on:

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
   inputs:
      envname:
        type: choice
        description: 'target environment name '
        required: true
        options:
        - 'dev'
        - 'qa'
        - 'uat'
      
      compartment-name:
       description: 'compartment name of the DB '
       required: true
       type: string
       default: thayer_dev
      db-instance-name:
       description: 'db instance to stop, start or terminate'
       required: true
       type: string
       default: dev2
      dbaction:
        type: choice
        description: 'db action '
        required: true
        options:
        - 'start'
        - 'stop'
        #- 'terminate'
        default: start
      
  
jobs:
  
    
  getcmpanddbinstid:
   uses: './.github/workflows/GetOCIDsOfResources.yml'
   with:
          envname: ${{ inputs.envname || 'dev' }} 
          db-instance-name: ${{ inputs.db-instance-name || 'Thayer_Development' }}
          compartment-name: ${{  inputs.compartment-name || 'thayer_dev' }}
          #db-subnet-name: ${{  inputs.db-subnet-name || 'thayer_dev_net' }}
   secrets: inherit
 
  invokeocicmd:
    needs: getcmpanddbinstid
    
    uses: ./.github/workflows/GenericOCICommandExecution.yml
    with:
          envname: ${{inputs.envname }}
          ocicmdtoexecute: "oci db autonomous-database ${{ inputs.dbaction }}   --autonomous-database-id ${{ needs.getcmpanddbinstid.outputs.dbinstanceocid }} "
    secrets: inherit      
   
      
  handleocioutput: 
    needs: [ getcmpanddbinstid, invokeocicmd ]
    runs-on: self-hosted
    environment: ${{ inputs.envname }}
    name: handleocioutput
    steps:
   
      - name: HandleOutputOfOCICmd
        id: invokeocioutput
        run: |
         echo "output from the oci cmd"
         echo ${{ needs.invokeocicmd.outputs.output }} | jq .
        
     
