name: "ATPDB-StopandStart "
on:

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
   inputs:
      envname:
        type: choice
        description: 'target environment name '
        required: true
        options:
        - 'dev'
        - 'qa'
        - 'uat'
      
      compartment-name:
       description: 'compartment name of the DB '
       required: true
       type: string
       default: thayer_dev
      db-instance-name:
       description: 'db instance to stop, start or terminate'
       required: true
       type: string
       default: dev2
      dbaction:
        type: choice
        description: 'db action '
        required: true
        options:
        - 'start'
        - 'stop'
        #- 'terminate'
        default: start
      
  
jobs:
  
    
  getcmpanddbinstid:
   uses: './.github/workflows/GetOCIDsOfResources.yml'
   with:
          envname: ${{ inputs.envname || 'dev' }} 
          db-instance-name: ${{ inputs.db-instance-name || 'Thayer_Development' }}
          compartment-name: ${{  inputs.compartment-name || 'thayer_dev' }}
          #db-subnet-name: ${{  inputs.db-subnet-name || 'thayer_dev_net' }}
   secrets: inherit
 
  invokeocicmd:
    runs-on: self-hosted
    needs: [ getcmpanddbinstid]
    environment:  ${{
         github.ref_name == 'master' && 'dev'
         || github.ref_name == 'dev'    && 'dev'
         || 'dev'
      }}
    name: OCICMDINVOKE
    env:
      OCI_CLI_USER: ${{ secrets.OCI_CLI_USER }}
      OCI_CLI_TENANCY: ${{ secrets.OCI_CLI_TENANCY }}
      OCI_CLI_FINGERPRINT: ${{ secrets.OCI_CLI_FINGERPRINT }}
      OCI_CLI_KEY_CONTENT: ${{ secrets.OCI_CLI_KEY_CONTENT }}
      OCI_CLI_REGION: ${{ secrets.OCI_CLI_REGION }}
      OCI_INSTANCE_ID: ${{ secrets.OCI_INSTANCE_ID }}
      #OCI_COMPARTMENT_ID: ${{ format('DB_{0}_USER', inputs.db-instance-name || 'thayeratp' ) }}
      OCI_COMPARTMENT_NAME: ${{  inputs.compartment-name || 'thayer_dev' }}
      
   
    steps:
      
     
   
      - name: Invoke OCI CMD the DB
        uses: ./.github/workflows/GenericOCICommandExecution.yml
        id: invokeoci
        with:
          envname: ${{inputs.envname }}
          ocicmdtoexecute: "oci db autonomous-database ${{ inputs.dbaction }}   --autonomous-database-id ${{ needs.getcmpanddbinstid.outputs.dbinstanceocid }} "
          silent: false
      - name: HandleOutputOfOCICmd
        id: invokeocioutput
        run: |
         echo ${{ steps.invokeoci.outputs.output }} | jq .
        
     
