name: "GenericWFForAnyOCICommand"
on:
#  schedule:
#    - cron: '*/5 * * * *'
  
 # push:
 #   branches: [ "main" ]
 # pull_request:
 #   branches: [ "main" ]

  
  workflow_call:
   inputs:
      envname:
        description: 'source database env name'
        required: true
        type: string
        default: dev
      ocicmdtoexecute:
        description: "Complete OCI command to execute"
        required: true
        type: string
        default: dev
      
   outputs:
      ocicmdoutput:
        description: "return output of oci command"
        value: ${{ jobs.ExecuteOCICMD.outputs.ocicmdoutput }}
      
     
jobs:
  executeocicmd:
    runs-on: self-hosted
    environment: ${{ inputs.envname || 'dev' }} 
    name: ExecuteOCICMD
    env:
      OCI_CLI_USER: ${{ secrets.OCI_CLI_USER }}
      OCI_CLI_TENANCY: ${{ secrets.OCI_CLI_TENANCY }}
      OCI_CLI_FINGERPRINT: ${{ secrets.OCI_CLI_FINGERPRINT }}
      OCI_CLI_KEY_CONTENT: ${{ secrets.OCI_CLI_KEY_CONTENT }}
      OCI_CLI_REGION: ${{ secrets.OCI_CLI_REGION }}
      OCI_INSTANCE_ID: ${{ secrets.OCI_INSTANCE_ID }}
      #RUNNER_TOOL_CACHE: /thayer/envs/dev
      #AGENT_TOOLSDIRECTORY: /thayer/envs/dev
      DB_ENV: ${{ inputs.envname || 'dev' }}
      
      
      OCI_CMD_CONTENTS: ${{  inputs.ocicmdtoexecute || 'oci iam list' }}
      
    steps:
      - name: Workspace Location
        run: echo $GITHUB_WORKSPACE
      
      - name: Execute OCI CMD
        if: "${{ inputs.ocicmdtoexecute != '' }}"
        uses: oracle-actions/run-oci-cli-command@v1.3.2
        id: executeocicmd
        with:
          command: ' ${{ env.OCI_CMD_CONTENTS }} '
          #query: "data[?name=='${{ env.OCI_COMPARTMENT_NAME }}'].id"
          silent: false
      - name: Add Compartment OCID To the Env 
        if: "${{ inputs.compartment-name != '' }}"
        id: executeocicmdoutput
        env:
         cmpid: ${{ steps.executeocicmd.outputs.output }}
        run: |
          echo "test****"$cmpid
          echo "cmpid=$cmpid" >> $GITHUB_OUTPUT
          cat $GITHUB_OUTPUT
        
          
         
          echo "retid"$retid
          echo "OCICMDOUTPUT=$(echo $cmpid)" >> $GITHUB_ENV
          echo "OCICMDOUTPUT=$(echo $cmpid)" >> $GITHUB_OUTPUT
       
    outputs:
      ocicmdoutput: ${{ steps.executeocicmdoutput.outputs.OCICMDOUTPUT }}
     
      
      
     
    
