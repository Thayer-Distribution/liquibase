name: "oci-ATP-dbclone "
on:

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
   inputs:
      envname:
        type: choice
        description: 'target environment name '
        required: true
        options:
        - 'dev'
        - 'qa'
        - 'uat'
      dbdetails:
        description: 'Give Details of DB as mentioned in the default format  '
        required: true
        default: '{ "DBNAME": "thayerdev", "DISPLAYNAME": "THAYERDEVELOPMENT","CLONETYPE": "METADATA", "DBVERSION": "23ai"}'
        type: string
      dbcomputemodel:
        type: choice
        options:
          - ECPU
          - ECPU
        description: 'database compute model  '
        required: true
        default: 'ECPU'
      dbcpucount:
       description: 'database cpu count '
       required: true
       type: number
       default: 2
       
      dbstoragesize:
       description: 'database storage size in gb '
       required: true
       type: number
       default: 20
      compartment-name:
       description: 'compartment name to create the DB '
       required: true
       type: string
       default: thayer_dev
      db-instance-name:
       description: 'db instance to clone from '
       required: true
       type: string
       default: Thayer_Development
      db-subnet-name:
       description: 'db instance vcn subnet name '
       required: true
       type: string
       default: thayer_dev_net
      nsg-name:
       description: 'nsg name to assoicate the DB Instance with'
       required: true
       type: string
       default: thayerdev_NSG
      nsg-cmpname:
       description: 'Compartment name of the NSG'
       required: true
       type: string
       default: 'OCI_USEast_Thayer_Core_Infra'
      
  
jobs:
  inputsreceived:
   runs-on: self-hosted
   
   name: inputsreceived
   steps:
      - name: InputsReceived
        id: inputsreceived
        run: |
         echo "innst name***" ${{ inputs.dbinstance-toclonefrom }}
         #echo " comp name***" ${{ inputs.compartment-name }}
         echo "env name***" ${{ inputs.envname }}
        
         echo '${{ inputs.dbdetails }}' | jq -r 'to_entries[] | "\(.key)=\(.value)"' | xargs -I '{}' echo "{}" >> "$GITHUB_OUTPUT"
         cat $GITHUB_OUTPUT
         #echo "{ 
         #      \"nsgid\": \"ocid1.networksecuritygroup.oc1.iad.aaaaaaaaphbtttjlxe6dkuuv5lcyb77jlynahuavislaia5eynn2dp6dawra\"
        #     }" > nsgid.json
    
  getcmpanddbinstid:
   uses: './.github/workflows/GetOCIDsOfResources.yml'
   with:
          envname: ${{ inputs.envname || 'dev' }} 
          db-instance-name: ${{ inputs.db-instance-name || 'Thayer_Development' }}
          compartment-name: ${{  inputs.compartment-name || 'thayer_dev' }}
   secrets: inherit
  getnsgcmpid:
   uses: './.github/workflows/GetOCIDsOfResources.yml'
   with:
          envname: ${{ inputs.envname || 'dev' }} 
          
          compartment-name: ${{  inputs.nsg-cmpname || 'OCI_USEast_Thayer_Core_Infra' }}
          
   secrets: inherit
  getsubnetid:
   uses: './.github/workflows/GetOCIDsOfResources.yml'
   with:
          envname: ${{ inputs.envname || 'dev' }} 
          compartment-name: ${{  inputs.compartment-name || 'OCI_USEast_Thayer_Core_Infra' }}
          db-subnet-name: ${{  inputs.db-subnet-name || 'thayer_dev_net' }}
   secrets: inherit
  getresourceids:
   uses: './.github/workflows/GetOCIDsOfResources.yml'
   needs: getnsgcmpid
   with:
          envname: ${{ inputs.envname || 'dev' }} 
          compartment-name: ${{  inputs.compartment-name || 'OCI_USEast_Thayer_Core_Infra' }}
          nsg-name: ${{  inputs.nsg-name || 'thayerdev_nsg' }}
          nsg-compartmentid: ${{  needs.getnsgcmpid.outputs.compartmentocid   || 'OCI_USEast_Thayer_Core_Infra' }}
                    
   secrets: inherit
  clonedb-instance:
    runs-on: self-hosted
    needs: [ inputsreceived, getcmpanddbinstid, getresourceids, getsubnetid]
    environment:  ${{
         github.ref_name == 'master' && 'dev'
         || github.ref_name == 'dev'    && 'dev'
         || 'dev'
      }}
    name: OCI DB CLONE
    env:
      OCI_CLI_USER: ${{ secrets.OCI_CLI_USER }}
      OCI_CLI_TENANCY: ${{ secrets.OCI_CLI_TENANCY }}
      OCI_CLI_FINGERPRINT: ${{ secrets.OCI_CLI_FINGERPRINT }}
      OCI_CLI_KEY_CONTENT: ${{ secrets.OCI_CLI_KEY_CONTENT }}
      OCI_CLI_REGION: ${{ secrets.OCI_CLI_REGION }}
      OCI_INSTANCE_ID: ${{ secrets.OCI_INSTANCE_ID }}
      #OCI_COMPARTMENT_ID: ${{ format('DB_{0}_USER', inputs.db-instance-name || 'thayeratp' ) }}
      OCI_COMPARTMENT_NAME: ${{  inputs.compartment-name || 'thayer_dev' }}
      CLONEFROM_DB_INSTANCE: ${{  inputs.dbinstance-toclonefrom || 'Thayer_Development' }}
      NSGID: "${{  needs.getresourceids.outputs.nsgid  }} "
      SUBNETID: "${{  needs.getsubnetid.outputs.subnetid  }} "
  
   
    steps:
      
      - name: parseinput
        id: parseinput
        run: |
         echo "innst name***" ${{ inputs.dbinstance-toclonefrom }}
         #echo " comp name***" ${{ inputs.compartment-name }}
         echo "env name***" ${{ inputs.envname }}
         echo '${{ inputs.dbdetails }}' | jq -r 'to_entries[] | "\(.key)=\(.value)"'
         echo '${{ inputs.dbdetails }}' | jq -r 'to_entries[] | "\(.key)=\(.value)"' | xargs -I '{}' echo "{}"
         echo '${{ inputs.dbdetails }}' | jq -r 'to_entries[] | "\(.key)=\(.value)"' | xargs -I '{}' echo "{}" >> "$GITHUB_OUTPUT"
         cat $GITHUB_OUTPUT
      - name: testoutputs
        run: |
          echo "subnetid***"${{  needs.getsubnetid.outputs.subnetid  }} 
          echo "srcid***"${{  needs.getresourceids.outputs.nsgid  }} 
          cat ${GITHUB_OUTPUT}
          echo "githuboutput***"
          cat $GITHUB_OUTPUT
          
          echo "clonetype" ${{ steps.parseinput.outputs.CLONETYPE }}
          
   
      - name: Clone the DB
        uses: oracle-actions/run-oci-cli-command@v1.3.2
        id: cloneatpdb
        with:
          command: "oci db autonomous-database create-from-clone --clone-type ${{ steps.parseinput.outputs.CLONETYPE }} --source-id  ${{ needs.getcmpanddbinstid.outputs.dbinstanceocid }} --compute-model ${{ inputs.dbcomputemodel }} --compute-count ${{ inputs.dbcpucount }} --data-storage-size-in-gbs ${{ inputs.dbstoragesize }} --admin-password ${{ secrets.DB_THAYER_DEVELOPMENT_PASSWD }} --compartment-id  ${{ needs.getcmpanddbinstid.outputs.compartmentocid }} --db-version ${{ steps.parseinput.outputs.DBVERSION }} --db-name ${{ steps.parseinput.outputs.DBNAME }} --display-name  ${{ steps.parseinput.outputs.DISPLAYNAME }} --nsg-ids ${{ needs.getresourceids.outputs.nsgid }} --subnet-id ${{ needs.getsubnetid.outputs.subnetid }} "
          silent: false
     

