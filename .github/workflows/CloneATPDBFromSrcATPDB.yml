name: "oci-ATP-dbclone "
on:

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
   inputs:
      envname:
        type: choice
        description: 'target environment name '
        required: true
        options:
        - 'dev'
        - 'qa'
        - 'uat'
      dbname:
        description: 'database name '
        required: true
        default: 'dev1'
        type: string
      dbdisplayname:
        description: 'database display name '
        required: true
        default: 'dev2'
        type: string
      dbclonetype:
        type: choice
        options:
          - FULL
          - METADATA
          - PARTIAL
        description: 'database clone type name '
        required: true
        default: 'FULL'
      dbversion:
        type: choice
        options:
          - 19c
          - 23ai
        description: 'database version   '
        required: true
        default: '19c'
      dbcomputemodel:
        type: choice
        options:
          - ECPU
          - ECPU
        description: 'database compute model  '
        required: true
        default: 'ECPU'
      dbcpucount:
       description: 'database cpu count '
       required: true
       type: number
       default: 2
       
      dbstoragesize:
       description: 'database storage size in gb '
       required: true
       type: number
       default: 20
      compartment-name:
       description: 'compartment name to create the DB '
       required: true
       type: string
       default: thayer_dev
      db-instance-name:
       description: 'db instance to clone from '
       required: true
       type: string
       default: Thayer_Development
      
  
jobs:
  printinputs:
   runs-on: self-hosted
   
   name: tstinputs
   steps:
      - name: InputsReceived
        run: |
         echo "innst name***" ${{ inputs.dbinstance-toclonefrom }}
         echo " comp name***" ${{ inputs.compartment-name }}
         echo "env name***" ${{ inputs.envname }}
         echo "[\"ocid1.networksecuritygroup.oc1.iad.aaaaaaaaphbtttjlxe6dkuuv5lcyb77jlynahuavislaia5eynn2dp6dawra\"]" > nsgid.json
    
  getcompartmentanddbinstid:
   uses: './.github/workflows/GetCompartmentAndDBInstanceID.yml'
   with:
          envname: ${{ inputs.envname || 'dev' }} 
          db-instance-name: ${{ inputs.db-instance-name || 'Thayer_Development' }}
          compartment-name: ${{  inputs.compartment-name || 'thayer_dev' }}
   secrets: inherit
  clonedb-instance:
    runs-on: self-hosted
    needs: getcompartmentanddbinstid
    environment:  ${{
         github.ref_name == 'master' && 'dev'
         || github.ref_name == 'dev'    && 'dev'
         || 'dev'
      }}
    name: OCI DB CLONE
    env:
      OCI_CLI_USER: ${{ secrets.OCI_CLI_USER }}
      OCI_CLI_TENANCY: ${{ secrets.OCI_CLI_TENANCY }}
      OCI_CLI_FINGERPRINT: ${{ secrets.OCI_CLI_FINGERPRINT }}
      OCI_CLI_KEY_CONTENT: ${{ secrets.OCI_CLI_KEY_CONTENT }}
      OCI_CLI_REGION: ${{ secrets.OCI_CLI_REGION }}
      OCI_INSTANCE_ID: ${{ secrets.OCI_INSTANCE_ID }}
      #OCI_COMPARTMENT_ID: ${{ format('DB_{0}_USER', inputs.db-instance-name || 'thayeratp' ) }}
      OCI_COMPARTMENT_NAME: ${{  inputs.compartment-name || 'thayer_dev' }}
      CLONEFROM_DB_INSTANCE: ${{  inputs.dbinstance-toclonefrom || 'Thayer_Development' }}
      NSGID: '{ nsgId: "ocid1.networksecuritygroup.oc1.iad.aaaaaaaaphbtttjlxe6dkuuv5lcyb77jlynahuavislaia5eynn2dp6dawra" }'
  
   
    steps:
            
      - name: Clone the DB
        uses: oracle-actions/run-oci-cli-command@v1.3.2
        id: cloneatpdb
        with:
          command: "oci db autonomous-database create-from-clone --clone-type ${{ inputs.dbclonetype }} --source-id  ${{ needs.getcompartmentanddbinstid.outputs.dbinstanceocid }} --compute-model ${{ inputs.dbcomputemodel }} --compute-count ${{ inputs.dbcpucount }} --data-storage-size-in-gbs ${{ inputs.dbstoragesize }} --admin-password ${{ secrets.DB_THAYER_DEVELOPMENT_PASSWD }} --compartment-id  ${{ needs.getcompartmentanddbinstid.outputs.compartmentocid }} --db-version ${{ inputs.dbversion }} --db-name ${{ inputs.dbname }} --display-name  ${{ inputs.dbdisplayname }} --nsg-ids file://nsgid.json "
          silent: false
     

