# This is a basic workflow to install JAVA and Get DB Wallet
name: GetVaultSecret
# Controls when the workflow will run
on:
 pull_request:
    branches: [ "main" ]
 workflow_call:
   inputs:
      envname:
        description: 'env name'
        required: true
        type: string
        default: dev
     
      compartment-name:
        description: 'Compartment of the Vault '
        required: true
        type: string
        default: 'thayer_dev'
      secret-name:
        description: 'secret name to retrieve from the Vault '
        required: true
        type: string
        default: 'liquibase'
   outputs:
     secretval:
        description: "return decoded secret from the vault"
        value: ${{ jobs.getNeededIDs.outputs.secretid }}
   

# A workflow run is made up of one or more jobs that can run sequentially or in parallel

jobs:
   getNeededIDs:
    uses: './.github/workflows/GetOCIDsOfResources.yml'
    with:
           envname: ${{ inputs.envname || 'dev' }} 
           compartment-name: ${{  inputs.compartment-name || 'thayer_dev' }}
           secret-name: ${{  inputs.secret-name || 'thayer_dev' }}
    secrets: inherit
    
   getVaultData:
    runs-on: self-hosted
    needs: getNeededIDs
    environment: ${{ inputs.envname }}
    
    name: Get Secret from the vault
    env:
      OCI_CLI_USER: ${{ secrets.OCI_CLI_USER }}
      OCI_CLI_TENANCY: ${{ secrets.OCI_CLI_TENANCY }}
      OCI_CLI_FINGERPRINT: ${{ secrets.OCI_CLI_FINGERPRINT }}
      OCI_CLI_KEY_CONTENT: ${{ secrets.OCI_CLI_KEY_CONTENT }}
      OCI_CLI_REGION: ${{ secrets.OCI_CLI_REGION }}
      
      VAULTENV: ${{ inputs.envname || 'dev' }}
      
      
      
      COMAPRTMENT_NAME: ${{ inputs.compartment-name || 'thayer_dev' }}
      
     
      SECRET_NAME: ${{ inputs.secret-name || 'liquibase' }}
     
  
    steps:
     
                   
      
      - name: Get Vault Data
        uses: oracle-actions/run-oci-cli-command@v1.3.2
        id: getvaultdata
       
        with:
          command: " oci secrets secret-bundle get --raw-output --secret-id ${{ needs.getNeededIDs.outputs.secretid }} "
          silent: false
      - name: set Vault Data
       
        id: setvaultdata
        run: |

         
         echo ${{ steps.getvaultdata.outputs.output }} | jq .'data."secret-bundle-content".content' 
         retid=$(echo ${{ steps.getvaultdata.outputs.output }}  | jq -r .'data."secret-bundle-content".content')
        
         #echo $retid
         #echo  ''$retid''
         
         #echo tst=$(echo  ''$retid'' | base64 -d)
         
         echo "SECRETVAL=$(echo  ''$retid'' | base64 -d)" >> $GITHUB_ENV
         echo "SECRETVAL=$(echo  ''$retid'' | base64 -d)" >> $GITHUB_OUTPUT

    outputs:
      secretval: ${{ steps.setvaultdata.outputs.SECRETVAL }}
          
       
        
          
          
      
